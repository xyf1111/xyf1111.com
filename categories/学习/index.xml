<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>学习 - 分类 - CC&#39;s Blog</title>
        <link>http://example.org/categories/%E5%AD%A6%E4%B9%A0/</link>
        <description>学习 - 分类 - CC&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Wed, 24 Nov 2021 16:03:46 &#43;0800</lastBuildDate><atom:link href="http://example.org/categories/%E5%AD%A6%E4%B9%A0/" rel="self" type="application/rss+xml" /><item>
    <title>Go Hash</title>
    <link>http://example.org/go-hash/</link>
    <pubDate>Wed, 24 Nov 2021 16:03:46 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-hash/</guid>
    <description><![CDATA[本节会介绍Go语言的哈希的实现原理，哈希是除了数组之外，最常见的数据结构。几乎所有的语言都会有数组和哈希表两种集合元素，有的语言将数组实现成]]></description>
</item><item>
    <title>Go Slice</title>
    <link>http://example.org/go-slice/</link>
    <pubDate>Sun, 21 Nov 2021 20:57:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-slice/</guid>
    <description><![CDATA[数组在Go语言中没那么常用，更常用的数据结构是切片，即动态数组，其长度并不固定，我们可以向切片中追加元素，它会在容量不足时自动扩容。 在Go语]]></description>
</item><item>
    <title>Go语言数组实现原理</title>
    <link>http://example.org/go-array/</link>
    <pubDate>Mon, 15 Nov 2021 11:37:06 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-array/</guid>
    <description><![CDATA[概述 数组是由相同类型元素的集合组成的数据结构，计算机会为数组分配一块连续的内存来保存其中的元素，我们可以利用数组中的索引快速访问特定元素，常]]></description>
</item><item>
    <title>Go垃圾收集器</title>
    <link>http://example.org/go-garbage-collector/</link>
    <pubDate>Tue, 09 Nov 2021 17:25:06 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-garbage-collector/</guid>
    <description><![CDATA[设计原理 今天的编程语言通常会使用以手动和自动两种方式管理内存，C、C++以及Rust等编程语言使用手动方式管理内存，工程师需要主动申请或者释]]></description>
</item><item>
    <title>Go Docker</title>
    <link>http://example.org/go-docker/</link>
    <pubDate>Fri, 05 Nov 2021 16:30:01 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-docker/</guid>
    <description><![CDATA[为什么需要Docker 1 使用docker的主要目标是容器化。也就是为你的应用程序提供一致的环境，而不依赖它运行的主机 想象一下你是否也会遇到下]]></description>
</item><item>
    <title>Mysql 调优1</title>
    <link>http://example.org/mysql-optimize/</link>
    <pubDate>Fri, 05 Nov 2021 15:12:39 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/mysql-optimize/</guid>
    <description><![CDATA[如何回答面试中的问题 面试中问到的SQL如何优化 错误回答 1 2 3 4 5 **加索引** **看执行计划** **优化SQL语句** **分库分表** **表]]></description>
</item><item>
    <title>Go测试从零到溜3-MySQL和Redis测试</title>
    <link>http://example.org/go-test3/</link>
    <pubDate>Tue, 02 Nov 2021 11:31:40 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-test3/</guid>
    <description><![CDATA[go-sqlmock sqlmock是一个实现sql/driver的mock库。它不需要建立真正的数据库连接就可以在测试中模拟任何sql驱动程序的行为。使用它可]]></description>
</item><item>
    <title>Go测试从零到溜2-网络测试</title>
    <link>http://example.org/go-test2/</link>
    <pubDate>Tue, 02 Nov 2021 09:40:17 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-test2/</guid>
    <description><![CDATA[httptest 在Web开发场景下的单元测试，如果涉及到HTTP请求推荐大家使用Go标准库net/http/httptest进行测试，能够显著提升效率。 在]]></description>
</item><item>
    <title>Go测试从零到溜1-单元测试</title>
    <link>http://example.org/go-test1/</link>
    <pubDate>Sun, 31 Oct 2021 20:48:32 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-test1/</guid>
    <description><![CDATA[Go语言测试 go test工具 Go语言中的测试依赖go test命令。编写测试代码和编写普通的Go代码过程是类似的，并不需要学习新的语法、规则和工]]></description>
</item><item>
    <title>RabbitMQ6</title>
    <link>http://example.org/rabbitmq6/</link>
    <pubDate>Wed, 29 Sep 2021 20:49:11 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/rabbitmq6/</guid>
    <description><![CDATA[远程过程调用(RPC) 在第二个教程中，我们学会了如何使用工作队列在多个worker之间分配耗时的任务。 但是，如果我们需要在远程计算机上运行函]]></description>
</item></channel>
</rss>
