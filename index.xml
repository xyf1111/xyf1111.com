<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CC&#39;s Blog</title>
        <link>http://example.org/</link>
        <description>这是我的全新 Hugo 网站</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 15 Aug 2021 19:55:15 &#43;0800</lastBuildDate>
            <atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>RabbitMQ4</title>
    <link>http://example.org/rabbitmq4/</link>
    <pubDate>Sun, 15 Aug 2021 19:55:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/rabbitmq4/</guid>
    <description><![CDATA[路由 在上一教程中，我们构建了一个简单的日志记录系统。我们能够向许多接收者广播日志消息。 在本教程中，我们将它添加一个特性&ndash;我们将使]]></description>
</item><item>
    <title>Go Study18</title>
    <link>http://example.org/go-study18/</link>
    <pubDate>Sun, 25 Jul 2021 21:37:46 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-study18/</guid>
    <description><![CDATA[在web开发中一个不可避免的环节就是对请求参数进行校验，通常我们对在代码中定义和请求参数相对应的模型(结构体)，借助模型绑定快捷地解析请求中]]></description>
</item><item>
    <title>Go Study17</title>
    <link>http://example.org/go-study17/</link>
    <pubDate>Thu, 22 Jul 2021 22:44:20 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-study17/</guid>
    <description><![CDATA[select语句介绍 Go语言中的select语句用于监控并选择一组case语句执行相应的代码。它看起来类似于switch语句，但是selec]]></description>
</item><item>
    <title>Go Study 16</title>
    <link>http://example.org/go-study-16/</link>
    <pubDate>Sun, 18 Jul 2021 21:25:50 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go-study-16/</guid>
    <description><![CDATA[复制 将切片a中的元素复制到切片b中。 最简单的、最常用的方法就是使用内置的copy方法 1 2 3 // 一次将内存申请到位 b = make([]T, len(a)) copy(b, a) 除了使用内置的co]]></description>
</item><item>
    <title>RabbitMQ3</title>
    <link>http://example.org/rabbitmq3/</link>
    <pubDate>Wed, 14 Jul 2021 20:55:37 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/rabbitmq3/</guid>
    <description><![CDATA[发布订阅 在上一个教程中，我们创建了一个工作队列。工作队列背后的假设是每个任务只传递给一个工人。在这一部分中，我们将做一些完全不同的事情&nd]]></description>
</item><item>
    <title>RabbitMQ2</title>
    <link>http://example.org/rabbitmq2/</link>
    <pubDate>Mon, 28 Jun 2021 21:21:33 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/rabbitmq2/</guid>
    <description><![CDATA[任务队列/工作队列 在第一个教程中，我们编写程序从命名的队列发送和接收消息。在这一节中，我们将创建一个工作队列，该队列将用于多个工人之间分配耗]]></description>
</item><item>
    <title>RabbitMQ1</title>
    <link>http://example.org/rabbitmq1/</link>
    <pubDate>Wed, 23 Jun 2021 21:26:34 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/rabbitmq1/</guid>
    <description><![CDATA[先决条件 本教程假设RabbitMQ已安装并运行在本机上的标准端口(5672)。如果你使用不同的主机、端口或凭据，则需要调整连接设置 RabbitMQ Go语言]]></description>
</item><item>
    <title>Go性能调优</title>
    <link>http://example.org/go%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</link>
    <pubDate>Sun, 13 Jun 2021 19:49:31 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/go%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</guid>
    <description><![CDATA[Go性能优化 Go语言项目中的性能优化主要有以下几个方面 CPU profile：报告程序的CPU使用情况，按照一定频率去采集应用程序在CPU和寄存器]]></description>
</item><item>
    <title>GoContextStudy</title>
    <link>http://example.org/gocontextstudy/</link>
    <pubDate>Thu, 03 Jun 2021 21:53:53 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/gocontextstudy/</guid>
    <description><![CDATA[Go context study]]></description>
</item><item>
    <title>Git Study02</title>
    <link>http://example.org/git-study02/</link>
    <pubDate>Sun, 25 Apr 2021 21:06:58 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/git-study02/</guid>
    <description><![CDATA[Git Study 01]]></description>
</item></channel>
</rss>
